colnames(res) <- c("Grp 1", "Grp 2", "p-val", "adj. p-val")
res <- as.data.frame(res)
res$p-val = as.numeric(res$p-val)
res$`adj. p-val` = as.numeric(res$`adj. p-val`)
res
}
data1<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/tablets1.txt", sep = ",", header = TRUE)
data2<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/locate.txt", sep = ",", header = TRUE)
data3<-read.csv("D:/My Drive/Year 3 Sem 2/ST2137/Data/crab.csv", header = TRUE)
names(data1) = c('lab1', 'lab2', 'lab3', 'lab4', 'lab5', 'lab6', 'lab7')
attach(data1)
amount <- c(lab1, lab2, lab3, lab4, lab5, lab6, lab7)
lab<-c(rep(1,10),rep(2,10),rep(3,10),rep(4,10),rep(5,10), rep(6,10),rep(7,10))
data1_cleaned<-data.frame(amount = amount,lab = lab)
attach(data1_cleaned)
data1_cleaned$lab = as.factor(data1_cleaned$lab)
data2_cleaned <- data.frame(do.call('rbind', strsplit(as.character(data2$sales.location),' ',fixed=TRUE)))
data2_cleaned$X1 = as.numeric(data2_cleaned$X1)
data2_cleaned$X2 = as.factor(data2_cleaned$X2)
data3_cleaned <- data3[,c('weight', 'spine')]
data3_cleaned$spine = as.factor(data3_cleaned$spine)
Bonf.PWT(data1_cleaned)
Bonf.PWT(data2_cleaned)
Bonf.PWT(data3_cleaned)
# install.packages("car")
# library(car)
normtest <- function(df) {
shapiro.test((df[[1]]))$p.value
}
EVT <- function(df, norm.alpha) {
grps = unique(df[,2])
is_all_normal = TRUE
for (grp in grps) {
x <- df[df[[2]] == grp,]
if ((normtest(x)) < norm.alpha) {
is_all_normal = FALSE
}
}
if (is_all_normal) {
bartlett.test(df[[1]] ~ df[[2]], data = df)$p.value
} else {
leveneTest(df[[1]] ~ df[[2]], data = df)$`Pr(>F)`[1]
}
}
Bonf.PWT <- function(df, norm.alpha = 0.05, var.alpha = 0.05) {
var_p <- EVT(df, norm.alpha)
equal_var = var_p >= var.alpha
print(var_p)
if (equal_var) {
print('Equal variance')
} else {
print('Unequal variance')
}
res <- NULL
grps = unique(df[,2])
num_tests = choose(length(grps), 2)
for (grp1 in grps) {
grp1_val <- df[df[[2]] == grp1, 1]
for (grp2 in grps) {
if (grp1 == grp2) {
next
}
grp2_val <- df[df[[2]] == grp2, 1]
p_val <- t.test(grp1_val, grp2_val, mu = 0, var.equal = equal_var)$p.value
row <- c(grp1, grp2, p_val, min(c(1, p_val * num_tests)))
res <- rbind(res, row)
}
}
colnames(res) <- c("Grp 1", "Grp 2", "p-val", "adj. p-val")
res <- as.data.frame(res)
res$`p-val` = as.numeric(res$`p-val`)
res$`adj. p-val` = as.numeric(res$`adj. p-val`)
res
}
data1<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/tablets1.txt", sep = ",", header = TRUE)
data2<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/locate.txt", sep = ",", header = TRUE)
data3<-read.csv("D:/My Drive/Year 3 Sem 2/ST2137/Data/crab.csv", header = TRUE)
names(data1) = c('lab1', 'lab2', 'lab3', 'lab4', 'lab5', 'lab6', 'lab7')
attach(data1)
amount <- c(lab1, lab2, lab3, lab4, lab5, lab6, lab7)
lab<-c(rep(1,10),rep(2,10),rep(3,10),rep(4,10),rep(5,10), rep(6,10),rep(7,10))
data1_cleaned<-data.frame(amount = amount,lab = lab)
attach(data1_cleaned)
data1_cleaned$lab = as.factor(data1_cleaned$lab)
data2_cleaned <- data.frame(do.call('rbind', strsplit(as.character(data2$sales.location),' ',fixed=TRUE)))
data2_cleaned$X1 = as.numeric(data2_cleaned$X1)
data2_cleaned$X2 = as.factor(data2_cleaned$X2)
data3_cleaned <- data3[,c('weight', 'spine')]
data3_cleaned$spine = as.factor(data3_cleaned$spine)
Bonf.PWT(data1_cleaned)
Bonf.PWT(data2_cleaned)
Bonf.PWT(data3_cleaned)
# install.packages("car")
# library(car)
normtest <- function(df) {
shapiro.test((df[[1]]))$p.value
}
EVT <- function(df, norm.alpha) {
grps = unique(df[,2])
is_all_normal = TRUE
for (grp in grps) {
x <- df[df[[2]] == grp,]
if ((normtest(x)) < norm.alpha) {
is_all_normal = FALSE
}
}
if (is_all_normal) {
bartlett.test(df[[1]] ~ df[[2]], data = df)$p.value
} else {
leveneTest(df[[1]] ~ df[[2]], data = df)$`Pr(>F)`[1]
}
}
Bonf.PWT <- function(df, norm.alpha = 0.05, var.alpha = 0.05) {
var_p <- EVT(df, norm.alpha)
equal_var = var_p >= var.alpha
if (equal_var) {
print('Equal variance')
} else {
print('Unequal variance')
}
res <- NULL
grps = unique(df[,2])
num_tests = choose(length(grps), 2)
for (grp1 in grps) {
grp1_val <- df[df[[2]] == grp1, 1]
for (grp2 in grps) {
if (grp1 == grp2) {
next
}
grp2_val <- df[df[[2]] == grp2, 1]
p_val <- t.test(grp1_val, grp2_val, mu = 0, var.equal = equal_var)$p.value
row <- c(grp1, grp2, p_val, min(c(1, p_val * num_tests)))
res <- rbind(res, row)
}
}
colnames(res) <- c("Grp 1", "Grp 2", "p-val", "adj. p-val")
res <- as.data.frame(res)
res$`p-val` = as.numeric(res$`p-val`)
res$`adj. p-val` = as.numeric(res$`adj. p-val`)
res
}
data1<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/tablets1.txt", sep = ",", header = TRUE)
data2<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/locate.txt", sep = ",", header = TRUE)
data3<-read.csv("D:/My Drive/Year 3 Sem 2/ST2137/Data/crab.csv", header = TRUE)
names(data1) = c('lab1', 'lab2', 'lab3', 'lab4', 'lab5', 'lab6', 'lab7')
attach(data1)
amount <- c(lab1, lab2, lab3, lab4, lab5, lab6, lab7)
lab<-c(rep(1,10),rep(2,10),rep(3,10),rep(4,10),rep(5,10), rep(6,10),rep(7,10))
data1_cleaned<-data.frame(amount = amount,lab = lab)
attach(data1_cleaned)
data1_cleaned$lab = as.factor(data1_cleaned$lab)
data2_cleaned <- data.frame(do.call('rbind', strsplit(as.character(data2$sales.location),' ',fixed=TRUE)))
data2_cleaned$X1 = as.numeric(data2_cleaned$X1)
data2_cleaned$X2 = as.factor(data2_cleaned$X2)
data3_cleaned <- data3[,c('weight', 'spine')]
data3_cleaned$spine = as.factor(data3_cleaned$spine)
Bonf.PWT(data1_cleaned)
Bonf.PWT(data2_cleaned)
Bonf.PWT(data3_cleaned)
# install.packages("car")
# library(car)
normtest <- function(df) {
shapiro.test((df[[1]]))$p.value
}
EVT <- function(df, norm.alpha) {
grps = unique(df[,2])
is_all_normal = TRUE
for (grp in grps) {
x <- df[df[[2]] == grp,]
if ((normtest(x)) < norm.alpha) {
is_all_normal = FALSE
}
}
if (is_all_normal) {
bartlett.test(df[[1]] ~ df[[2]], data = df)$p.value
} else {
leveneTest(df[[1]] ~ df[[2]], data = df)$`Pr(>F)`[1]
}
}
Bonf.PWT <- function(df, norm.alpha = 0.05, var.alpha = 0.05) {
var_p <- EVT(df, norm.alpha)
equal_var = var_p >= var.alpha
if (equal_var) {
print('Equal variance')
} else {
print('Unequal variance')
}
res <- NULL
grps = unique(df[,2])
num_tests = choose(length(grps), 2)
for (grp1 in grps) {
grp1_val <- df[df[[2]] == grp1, 1]
for (grp2 in grps) {
if (grp1 == grp2) {
next
}
grp2_val <- df[df[[2]] == grp2, 1]
p_val <- t.test(grp1_val, grp2_val, mu = 0, var.equal = equal_var)$p.value
row <- c(grp1, grp2, p_val, min(c(1, p_val * num_tests)))
res <- rbind(res, row)
}
}
colnames(res) <- c("Grp 1", "Grp 2", "p-val", "adj. p-val")
res <- as.data.frame(res)
res$`p-val` = as.numeric(res$`p-val`)
res$`adj. p-val` = as.numeric(res$`adj. p-val`)
res
}
data1<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/tablets1.txt", sep = ",", header = TRUE)
data2<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/locate.txt", sep = ",", header = TRUE)
data3<-read.csv("D:/My Drive/Year 3 Sem 2/ST2137/Data/crab.csv", header = TRUE)
names(data1) = c('lab1', 'lab2', 'lab3', 'lab4', 'lab5', 'lab6', 'lab7')
attach(data1)
amount <- c(lab1, lab2, lab3, lab4, lab5, lab6, lab7)
lab<-c(rep(1,10),rep(2,10),rep(3,10),rep(4,10),rep(5,10), rep(6,10),rep(7,10))
data1_cleaned<-data.frame(amount = amount,lab = lab)
attach(data1_cleaned)
data1_cleaned$lab = as.factor(data1_cleaned$lab)
data2_cleaned <- data.frame(do.call('rbind', strsplit(as.character(data2$sales.location),' ',fixed=TRUE)))
data2_cleaned$X1 = as.numeric(data2_cleaned$X1)
data2_cleaned$X2 = as.factor(data2_cleaned$X2)
data3_cleaned <- data3[,c('weight', 'spine')]
data3_cleaned$spine = as.factor(data3_cleaned$spine)
Bonf.PWT(data1_cleaned)
Bonf.PWT(data2_cleaned)
Bonf.PWT(data3_cleaned)
### Tablets1 dataset
# [1] "Equal variance"
# Grp 1 Grp 2        p-val   adj. p-val
# row        1     2 4.505640e-02 9.461844e-01
# row.1      1     3 1.909046e-04 4.008997e-03
# row.2      1     4 1.584836e-08 3.328155e-07
# row.3      1     5 8.405647e-05 1.765186e-03
# row.4      1     6 2.540853e-04 5.335792e-03
# row.5      1     7 3.893939e-02 8.177271e-01
# row.6      2     1 4.505640e-02 9.461844e-01
# row.7      2     3 8.399982e-01 1.000000e+00
# row.8      2     4 2.032729e-02 4.268731e-01
# row.9      2     5 2.498023e-01 1.000000e+00
# row.10     2     6 2.510257e-01 1.000000e+00
# row.11     2     7 9.798464e-01 1.000000e+00
# row.12     3     1 1.909046e-04 4.008997e-03
# row.13     3     2 8.399982e-01 1.000000e+00
# row.14     3     4 4.364711e-06 9.165894e-05
# row.15     3     5 2.982417e-02 6.263076e-01
# row.16     3     6 4.626107e-02 9.714825e-01
# row.17     3     7 8.592892e-01 1.000000e+00
# row.18     4     1 1.584836e-08 3.328155e-07
# row.19     4     2 2.032729e-02 4.268731e-01
# row.20     4     3 4.364711e-06 9.165894e-05
# row.21     4     5 9.398064e-02 1.000000e+00
# row.22     4     6 1.566169e-01 1.000000e+00
# row.23     4     7 1.445587e-02 3.035733e-01
# row.24     5     1 8.405647e-05 1.765186e-03
# row.25     5     2 2.498023e-01 1.000000e+00
# row.26     5     3 2.982417e-02 6.263076e-01
# row.27     5     4 9.398064e-02 1.000000e+00
# row.28     5     6 9.435642e-01 1.000000e+00
# row.29     5     7 2.211283e-01 1.000000e+00
# row.30     6     1 2.540853e-04 5.335792e-03
# row.31     6     2 2.510257e-01 1.000000e+00
# row.32     6     3 4.626107e-02 9.714825e-01
# row.33     6     4 1.566169e-01 1.000000e+00
# row.34     6     5 9.435642e-01 1.000000e+00
# row.35     6     7 2.245891e-01 1.000000e+00
# row.36     7     1 3.893939e-02 8.177271e-01
# row.37     7     2 9.798464e-01 1.000000e+00
# row.38     7     3 8.592892e-01 1.000000e+00
# row.39     7     4 1.445587e-02 3.035733e-01
# row.40     7     5 2.211283e-01 1.000000e+00
# row.41     7     6 2.245891e-01 1.000000e+00
### Locate dataset
# [1] "Equal variance"
# Grp 1 Grp 2        p-val  adj. p-val
# row       F     M 0.0003377932 0.001013379
# row.1     F     R 0.0251934360 0.075580308
# row.2     M     F 0.0003377932 0.001013379
# row.3     M     R 0.0413468947 0.124040684
# row.4     R     F 0.0251934360 0.075580308
# row.5     R     M 0.0413468947 0.124040684
### Crab dataset
# [1] "Equal variance"
# Grp 1 Grp 2       p-val adj. p-val
# row       3     1 0.009779286 0.02933786
# row.1     3     2 0.079348544 0.23804563
# row.2     1     3 0.009779286 0.02933786
# row.3     1     2 0.012903217 0.03870965
# row.4     2     3 0.079348544 0.23804563
# row.5     2     1 0.012903217 0.03870965
install.packages("car")
library(car)
normtest <- function(df) {
shapiro.test((df[[1]]))$p.value
}
EVT <- function(df, norm.alpha) {
grps = unique(df[,2])
is_all_normal = TRUE
for (grp in grps) {
x <- df[df[[2]] == grp,]
if ((normtest(x)) < norm.alpha) {
is_all_normal = FALSE
}
}
if (is_all_normal) {
bartlett.test(df[[1]] ~ df[[2]], data = df)$p.value
} else {
leveneTest(df[[1]] ~ df[[2]], data = df)$`Pr(>F)`[1]
}
}
Bonf.PWT <- function(df, norm.alpha = 0.05, var.alpha = 0.05) {
var_p <- EVT(df, norm.alpha)
equal_var = var_p >= var.alpha
if (equal_var) {
print('Equal variance')
} else {
print('Unequal variance')
}
res <- NULL
grps = unique(df[,2])
num_tests = choose(length(grps), 2)
for (grp1 in grps) {
grp1_val <- df[df[[2]] == grp1, 1]
for (grp2 in grps) {
if (grp1 == grp2) {
next
}
grp2_val <- df[df[[2]] == grp2, 1]
p_val <- t.test(grp1_val, grp2_val, mu = 0, var.equal = equal_var)$p.value
row <- c(grp1, grp2, p_val, min(c(1, p_val * num_tests)))
res <- rbind(res, row)
}
}
colnames(res) <- c("Grp 1", "Grp 2", "p-val", "adj. p-val")
res <- as.data.frame(res)
res$`p-val` = as.numeric(res$`p-val`)
res$`adj. p-val` = as.numeric(res$`adj. p-val`)
res
}
data1<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/tablets1.txt", sep = ",", header = TRUE)
data2<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/locate.txt", sep = ",", header = TRUE)
data3<-read.csv("D:/My Drive/Year 3 Sem 2/ST2137/Data/crab.csv", header = TRUE)
names(data1) = c('lab1', 'lab2', 'lab3', 'lab4', 'lab5', 'lab6', 'lab7')
attach(data1)
amount <- c(lab1, lab2, lab3, lab4, lab5, lab6, lab7)
lab<-c(rep(1,10),rep(2,10),rep(3,10),rep(4,10),rep(5,10), rep(6,10),rep(7,10))
data1_cleaned<-data.frame(amount = amount,lab = lab)
attach(data1_cleaned)
data1_cleaned$lab = as.factor(data1_cleaned$lab)
data2_cleaned <- data.frame(do.call('rbind', strsplit(as.character(data2$sales.location),' ',fixed=TRUE)))
data2_cleaned$X1 = as.numeric(data2_cleaned$X1)
data2_cleaned$X2 = as.factor(data2_cleaned$X2)
data3_cleaned <- data3[,c('weight', 'spine')]
data3_cleaned$spine = as.factor(data3_cleaned$spine)
Bonf.PWT(data1_cleaned)
Bonf.PWT(data2_cleaned)
Bonf.PWT(data3_cleaned)
install.packages("car")
normtest <- function(df) {
shapiro.test((df[[1]]))$p.value
}
EVT <- function(df, norm.alpha) {
grps = unique(df[,2])
is_all_normal = TRUE
for (grp in grps) {
x <- df[df[[2]] == grp,]
if ((normtest(x)) < norm.alpha) {
is_all_normal = FALSE
}
}
if (is_all_normal) {
bartlett.test(df[[1]] ~ df[[2]], data = df)$p.value
} else {
leveneTest(df[[1]] ~ df[[2]], data = df)$`Pr(>F)`[1]
}
}
Bonf.PWT <- function(df, norm.alpha = 0.05, var.alpha = 0.05) {
var_p <- EVT(df, norm.alpha)
equal_var = var_p >= var.alpha
if (equal_var) {
print('Equal variance')
} else {
print('Unequal variance')
}
res <- NULL
grps = unique(df[,2])
num_tests = choose(length(grps), 2)
for (grp1 in grps) {
grp1_val <- df[df[[2]] == grp1, 1]
for (grp2 in grps) {
if (grp1 == grp2) {
next
}
grp2_val <- df[df[[2]] == grp2, 1]
p_val <- t.test(grp1_val, grp2_val, mu = 0, var.equal = equal_var)$p.value
row <- c(grp1, grp2, p_val, min(c(1, p_val * num_tests)))
res <- rbind(res, row)
}
}
colnames(res) <- c("Grp 1", "Grp 2", "p-val", "adj. p-val")
res <- as.data.frame(res)
res$`p-val` = as.numeric(res$`p-val`)
res$`adj. p-val` = as.numeric(res$`adj. p-val`)
res
}
data1<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/tablets1.txt", sep = ",", header = TRUE)
data2<-read.table("D:/My Drive/Year 3 Sem 2/ST2137/Data/locate.txt", sep = ",", header = TRUE)
data3<-read.csv("D:/My Drive/Year 3 Sem 2/ST2137/Data/crab.csv", header = TRUE)
names(data1) = c('lab1', 'lab2', 'lab3', 'lab4', 'lab5', 'lab6', 'lab7')
attach(data1)
amount <- c(lab1, lab2, lab3, lab4, lab5, lab6, lab7)
lab<-c(rep(1,10),rep(2,10),rep(3,10),rep(4,10),rep(5,10), rep(6,10),rep(7,10))
data1_cleaned<-data.frame(amount = amount,lab = lab)
attach(data1_cleaned)
data1_cleaned$lab = as.factor(data1_cleaned$lab)
data2_cleaned <- data.frame(do.call('rbind', strsplit(as.character(data2$sales.location),' ',fixed=TRUE)))
data2_cleaned$X1 = as.numeric(data2_cleaned$X1)
data2_cleaned$X2 = as.factor(data2_cleaned$X2)
data3_cleaned <- data3[,c('weight', 'spine')]
data3_cleaned$spine = as.factor(data3_cleaned$spine)
Bonf.PWT(data1_cleaned)
Bonf.PWT(data2_cleaned)
Bonf.PWT(data3_cleaned)
shiny::runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
library(shiny)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(ggvis)
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
rent_listings <- read.csv("../../rent_listings_data_cleaned.csv", stringsAsFactors = T)
rent_listings <- read.csv("../../rent_listings_data_cleaned.csv", stringsAsFactors = T)
library(shiny)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(ggvis)
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
runApp()
runApp()
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
runApp()
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
runApp()
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
runApp()
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject')
rent_listings <- read.csv("../../rent_listings_data_cleaned.csv", stringsAsFactors = T)
sales_listings <- read.csv("../../sales_listings_data_cleaned.csv", stringsAsFactors = T)
View(mat)
View(df1)
View(mat)
rent_listings <- read.csv("../../rent_listings_data_cleaned.csv", stringsAsFactors = T)
setwd("G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project/Code/TeamProject")
rent_listings <- read.csv("../../rent_listings_data_cleaned.csv", stringsAsFactors = T)
sales_listings <- read.csv("../../sales_listings_data_cleaned.csv", stringsAsFactors = T)
View(rent_listings)
View(rent_listings)
View(sales_listings)
runApp()
runApp()
?numericInput
runApp()
View(rent_listings)
runApp()
runApp()
runApp()
View(sales_listings)
runApp()
library(shinywidgets)
?autonumericInput
??autonumericInput
library(shinyWidgets)
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project')
library(shiny)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(ggvis)
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project')
runApp('G:/My Drive/Year 4 Sem 1/DBA3702/DBA3702 Team Project')
